@using ResourceManagementSystem2.Models
@using Kendo.Mvc.UI
@model Programmer[]

@{
    ViewBag.Title = "Resource Management System";
}


@using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm" }))
{
    @Html.AntiForgeryToken()
}

@{
    var taskTemplate = @"
        <div class='task-template' style='background-color:#=Color#;'>
            <p>
               <div class='text-block'> #:title# </div>
            </p>
        </div>";
}

@(Html.Kendo().Scheduler<TaskViewModel>()
    .Name("scheduler")
    .Editable(e => e.TemplateId("editor"))
    .EventTemplate(taskTemplate)
    .Events(e => e.Navigate("onNavigate"))
    .Events(e => e.Cancel("onCancel"))
    .Date(DateTime.Now)
    .StartTime(DateTime.Now)
    .Views(views =>
    {
        views.TimelineMonthView(timeline =>
        {
            timeline.StartTime(DateTime.MinValue);
            timeline.EndTime(DateTime.MaxValue);
            timeline.EventHeight(20);
            timeline.ColumnWidth(15);
            timeline.DateHeaderTemplate("<strong>#=kendo.toString(date, 'dd')#</strong>");
        });

    })
    .Group(group => group.Resources("ProgrammerID").Orientation(SchedulerGroupOrientation.Vertical))
    .Resources(resource =>
    {
        resource.Add(m => m.ProgrammerID)
        .Title("ProgrammerID")
        .Name("ProgrammerID")
        .DataTextField("Name")
        .DataValueField("ProgrammerViewModelID")
        .DataSource(ds => ds.Read("ReadForScheduler", "Programmers")
        .Events(e =>
        {
            //e.Push("onSync");
        })
        );
    })

    .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.TaskViewModelID);
                m.Field(f => f.Title).DefaultValue("No title");
            })
        .Read(rd =>
        {
            rd.Action("Read", "Tasks").Data("getMonthAndYear");

        })
    .Create("Create", "Tasks")
    .Destroy("Destroy", "Tasks")
        .Update(upd =>
        {
            upd.Action("Update", "Tasks");

            //upd.Data("onTest");
        })
    //.Events(e => e.Sync("onChange"))

    )
)

@{
    Html.RenderAction("Index", "Projects");
    Html.RenderAction("Index", "Programmers");
    Html.RenderAction("Index", "Specializations");
}

<script>
    function getMonthAndYear() {
        var date = $("#scheduler").data("kendoScheduler").date();
        console.log({
            month: kendo.toString(date, 'MM'),
            year: kendo.toString(date, 'yyyy')
        });
        return {
            month: kendo.toString(date, 'MM'),
            year: kendo.toString(date, 'yyyy')
        };
    }

    function onNavigate(o) {
        var date = o.date;
        console.log({
            month: kendo.toString(date, 'MM'),
            year: kendo.toString(date, 'yyyy')
        });
        $("#scheduler").data("kendoScheduler").dataSource.transport.options.read.url = "/Tasks/Read";
        $("#scheduler").data("kendoScheduler").dataSource.read({
            month: kendo.toString(date, 'MM'),
            year: kendo.toString(date, 'yyyy')
        });
    }
</script>

<script>
    $(function () {
        renderButtons();
        renderFilteringWindow();
    });
</script>


<script id="editor" type="text/x-kendo-template">
    <h4>SetUp Your Task</h4>
    <div class="edit-form">
        <div data-container-for="start" class="k-edit-field">
            <label>Start: <input data-role="datepicker" name="start" /></label>
        </div>
        <div data-container-for="end" class="k-edit-field">
            <label> End:&nbsp;&nbsp;<input data-role="datepicker" name="end" /></label>
        </div>
        <div data-container-for="proj" class="k-edit-field">
            <label>
                Project :
                <select id="proj-dropdown" name="proj" data-role="dropdownlist" data-bind="value:ProjectID"
                        data-value-field="ProjectViewModelID" data-source="{transport: {read: {url : '/Scheduler/GetProjectColors'}}}" data-text-field="Title">
                    <option value="" disabled selected>Select your option</option>
                </select>
            </label>
        </div>
        <div data-container-for="programmers" class="k-edit-field">
            <label>
                Programmer :
                <select data-bind="value:ProgrammerID" name="programmers" disabled data-text-field="Name" data-role="dropdownlist" style="display: none;"
                        data-value-field="ProgrammerViewModelID" data-source="{transport: {read: {url : '/Programmers/ReadForScheduler'}}}"></select>
            </label>
        </div>
    </div>
</script>

<script>
    function onCancel(e) {
        var wnd = $(e.container).data("kendoWindow");
        wnd.close();
        var data = $('#scheduler').data('kendoScheduler').data();
        console.log(data)
        data.pop();
        console.log(data)

        var scheduler = $('#scheduler').data('kendoScheduler');
        console.log(scheduler.dataSource.data());
        setTimeout(function () { //плохо работает
            scheduler.dataSource.data().pop();
        }, 0);
        e.preventDefault();
    }
</script>

<script>
    function preventdef(e) {
        e.preventDefault()
    }
</script>